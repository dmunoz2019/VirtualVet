//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class virtualvetEntities : DbContext
    {
        public virtualvetEntities()
            : base("name=virtualvetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Consultas> Consultas { get; set; }
        public virtual DbSet<Mascotas> Mascotas { get; set; }
    
        public virtual int spActualizarCliente(Nullable<int> clienteId, string nombre, string apellido, string telefono, string email)
        {
            var clienteIdParameter = clienteId.HasValue ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarCliente", clienteIdParameter, nombreParameter, apellidoParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int spActualizarConsulta(Nullable<int> consultaId, Nullable<int> mascotaId, Nullable<System.DateTime> fecha, string descripcion, Nullable<decimal> costo)
        {
            var consultaIdParameter = consultaId.HasValue ?
                new ObjectParameter("ConsultaId", consultaId) :
                new ObjectParameter("ConsultaId", typeof(int));
    
            var mascotaIdParameter = mascotaId.HasValue ?
                new ObjectParameter("MascotaId", mascotaId) :
                new ObjectParameter("MascotaId", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarConsulta", consultaIdParameter, mascotaIdParameter, fechaParameter, descripcionParameter, costoParameter);
        }
    
        public virtual int spActualizarMascota(Nullable<int> mascotaId, Nullable<int> clienteId, string nombre, string especie, string raza, Nullable<System.DateTime> fechaNacimiento)
        {
            var mascotaIdParameter = mascotaId.HasValue ?
                new ObjectParameter("MascotaId", mascotaId) :
                new ObjectParameter("MascotaId", typeof(int));
    
            var clienteIdParameter = clienteId.HasValue ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieParameter = especie != null ?
                new ObjectParameter("Especie", especie) :
                new ObjectParameter("Especie", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarMascota", mascotaIdParameter, clienteIdParameter, nombreParameter, especieParameter, razaParameter, fechaNacimientoParameter);
        }
    
        public virtual int spAgregarCliente(string nombre, string apellido, string telefono, string email)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarCliente", nombreParameter, apellidoParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int spAgregarConsulta(Nullable<int> mascotaId, Nullable<System.DateTime> fecha, string descripcion, Nullable<decimal> costo)
        {
            var mascotaIdParameter = mascotaId.HasValue ?
                new ObjectParameter("MascotaId", mascotaId) :
                new ObjectParameter("MascotaId", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarConsulta", mascotaIdParameter, fechaParameter, descripcionParameter, costoParameter);
        }
    
        public virtual int spAgregarMascota(Nullable<int> clienteId, string nombre, string especie, string raza, Nullable<System.DateTime> fechaNacimiento)
        {
            var clienteIdParameter = clienteId.HasValue ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieParameter = especie != null ?
                new ObjectParameter("Especie", especie) :
                new ObjectParameter("Especie", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarMascota", clienteIdParameter, nombreParameter, especieParameter, razaParameter, fechaNacimientoParameter);
        }
    
        public virtual int spEliminarCliente(Nullable<int> clienteId)
        {
            var clienteIdParameter = clienteId.HasValue ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarCliente", clienteIdParameter);
        }
    
        public virtual int spEliminarConsulta(Nullable<int> consultaId)
        {
            var consultaIdParameter = consultaId.HasValue ?
                new ObjectParameter("ConsultaId", consultaId) :
                new ObjectParameter("ConsultaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarConsulta", consultaIdParameter);
        }
    
        public virtual int spEliminarMascota(Nullable<int> mascotaId)
        {
            var mascotaIdParameter = mascotaId.HasValue ?
                new ObjectParameter("MascotaId", mascotaId) :
                new ObjectParameter("MascotaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarMascota", mascotaIdParameter);
        }
    
        public virtual ObjectResult<spObtenerClientes_Result> spObtenerClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerClientes_Result>("spObtenerClientes");
        }
    
        public virtual ObjectResult<spObtenerConsultas_Result> spObtenerConsultas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerConsultas_Result>("spObtenerConsultas");
        }
    
        public virtual ObjectResult<spObtenerMascotas_Result> spObtenerMascotas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMascotas_Result>("spObtenerMascotas");
        }
    }
}
